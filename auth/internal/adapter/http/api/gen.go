// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// GenericError Generic response
type GenericError struct {
	Message *string `json:"message,omitempty"`
	Success bool    `json:"success"`
}

// GenericResponse Generic response
type GenericResponse struct {
	Success bool `json:"success"`
}

// LoginRequest Login request object
type LoginRequest struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// RegistrationRequest Registration request
type RegistrationRequest struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
	Username string              `json:"username"`
}

// User defines model for User.
type User struct {
	Avatar   *string             `json:"avatar,omitempty"`
	Email    openapi_types.Email `json:"email"`
	Id       openapi_types.UUID  `json:"id"`
	Username string              `json:"username"`
}

// PostJSONRequestBody defines body for Post for application/json ContentType.
type PostJSONRequestBody = RegistrationRequest

// PostLoginJSONRequestBody defines body for PostLogin for application/json ContentType.
type PostLoginJSONRequestBody = LoginRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Log out
	// (DELETE /)
	Delete(c *gin.Context)
	// User information
	// (GET /)
	Get(c *gin.Context)
	// Register a new account
	// (POST /)
	Post(c *gin.Context)
	// Log in
	// (POST /login)
	PostLogin(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// Delete operation middleware
func (siw *ServerInterfaceWrapper) Delete(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Delete(c)
}

// Get operation middleware
func (siw *ServerInterfaceWrapper) Get(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Get(c)
}

// Post operation middleware
func (siw *ServerInterfaceWrapper) Post(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Post(c)
}

// PostLogin operation middleware
func (siw *ServerInterfaceWrapper) PostLogin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostLogin(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.DELETE(options.BaseURL+"/", wrapper.Delete)
	router.GET(options.BaseURL+"/", wrapper.Get)
	router.POST(options.BaseURL+"/", wrapper.Post)
	router.POST(options.BaseURL+"/login", wrapper.PostLogin)
}

type DeleteRequestObject struct {
}

type DeleteResponseObject interface {
	VisitDeleteResponse(w http.ResponseWriter) error
}

type Delete200JSONResponse GenericResponse

func (response Delete200JSONResponse) VisitDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Delete401JSONResponse GenericError

func (response Delete401JSONResponse) VisitDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type Delete500JSONResponse GenericError

func (response Delete500JSONResponse) VisitDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetRequestObject struct {
}

type GetResponseObject interface {
	VisitGetResponse(w http.ResponseWriter) error
}

type Get200JSONResponse struct {
	Avatar   *string             `json:"avatar,omitempty"`
	Email    openapi_types.Email `json:"email"`
	Id       openapi_types.UUID  `json:"id"`
	Success  bool                `json:"success"`
	Username string              `json:"username"`
}

func (response Get200JSONResponse) VisitGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Get401JSONResponse GenericError

func (response Get401JSONResponse) VisitGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type Get500JSONResponse GenericError

func (response Get500JSONResponse) VisitGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostRequestObject struct {
	Body *PostJSONRequestBody
}

type PostResponseObject interface {
	VisitPostResponse(w http.ResponseWriter) error
}

type Post201JSONResponse struct {
	Avatar   *string             `json:"avatar,omitempty"`
	Email    openapi_types.Email `json:"email"`
	Id       openapi_types.UUID  `json:"id"`
	Success  bool                `json:"success"`
	Username string              `json:"username"`
}

func (response Post201JSONResponse) VisitPostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type Post409JSONResponse GenericError

func (response Post409JSONResponse) VisitPostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type Post500JSONResponse GenericError

func (response Post500JSONResponse) VisitPostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostLoginRequestObject struct {
	Body *PostLoginJSONRequestBody
}

type PostLoginResponseObject interface {
	VisitPostLoginResponse(w http.ResponseWriter) error
}

type PostLogin200JSONResponse struct {
	Expires time.Time `json:"expires"`
	Success bool      `json:"success"`
	Token   string    `json:"token"`
}

func (response PostLogin200JSONResponse) VisitPostLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostLogin403JSONResponse GenericError

func (response PostLogin403JSONResponse) VisitPostLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostLogin404JSONResponse GenericError

func (response PostLogin404JSONResponse) VisitPostLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostLogin500JSONResponse GenericError

func (response PostLogin500JSONResponse) VisitPostLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Log out
	// (DELETE /)
	Delete(ctx context.Context, request DeleteRequestObject) (DeleteResponseObject, error)
	// User information
	// (GET /)
	Get(ctx context.Context, request GetRequestObject) (GetResponseObject, error)
	// Register a new account
	// (POST /)
	Post(ctx context.Context, request PostRequestObject) (PostResponseObject, error)
	// Log in
	// (POST /login)
	PostLogin(ctx context.Context, request PostLoginRequestObject) (PostLoginResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// Delete operation middleware
func (sh *strictHandler) Delete(ctx *gin.Context) {
	var request DeleteRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Delete(ctx, request.(DeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Delete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteResponseObject); ok {
		if err := validResponse.VisitDeleteResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Get operation middleware
func (sh *strictHandler) Get(ctx *gin.Context) {
	var request GetRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Get(ctx, request.(GetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Get")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetResponseObject); ok {
		if err := validResponse.VisitGetResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Post operation middleware
func (sh *strictHandler) Post(ctx *gin.Context) {
	var request PostRequestObject

	var body PostJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Post(ctx, request.(PostRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Post")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostResponseObject); ok {
		if err := validResponse.VisitPostResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostLogin operation middleware
func (sh *strictHandler) PostLogin(ctx *gin.Context) {
	var request PostLoginRequestObject

	var body PostLoginJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostLogin(ctx, request.(PostLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostLogin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostLoginResponseObject); ok {
		if err := validResponse.VisitPostLoginResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
