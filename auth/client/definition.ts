/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** User information */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description The user is logged in and information about him is received */
        200: {
          headers: Record<string, unknown>;
          content: {
            'application/json': components['schemas']['GenericResponse'] & components['schemas']['User'];
          };
        };
        /** @description An unexpected error occured */
        500: {
          headers: Record<string, unknown>;
          content: {
            'application/json': components['schemas']['GenericError'];
          };
        };
      };
    };
    put?: never;
    /** Register a new account */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['RegistrationRequest'];
        };
      };
      responses: {
        /** @description User has been successfully created. */
        201: {
          headers: Record<string, unknown>;
          content: {
            'application/json': components['schemas']['GenericResponse'] & components['schemas']['User'];
          };
        };
        /** @description An unexpected error has occured */
        500: {
          headers: Record<string, unknown>;
          content: {
            'application/json': components['schemas']['GenericError'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/login': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Log in */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['LoginRequest'];
        };
      };
      responses: {
        /** @description User is successfully logged in. */
        200: {
          headers: Record<string, unknown>;
          content: {
            'application/json': components['schemas']['GenericResponse'] & {
              /** Format: jwt */
              token: string;
              /** Format: date-time */
              expires: string;
            };
          };
        };
        /** @description An unexpected error has occured */
        500: {
          headers: Record<string, unknown>;
          content: {
            'application/json': components['schemas']['GenericError'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** @description Generic response */
    GenericResponse: {
      success: boolean;
    };
    /** @description Generic response */
    GenericError: {
      success: boolean;
      message?: string;
    };
    User: {
      /** Format: uuid */
      id: string;
      /** Format: email */
      email: string;
      username: string;
      avatar?: string;
    };
    /** @description Login request object */
    LoginRequest: {
      username: string;
      password: string;
    };
    /** @description Registration request */
    RegistrationRequest: {
      username: string;
      /** Format: email */
      email: string;
      password: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
